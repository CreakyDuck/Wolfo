# Ce script contient toutes les informations nécessaires pour faire fonctionner les autres scripts.
# Merci de ne pas modifier son nom afin de garder une hiérachie et charger les autres scripts convenablement.

on script load:
	broadcast join "&6&lWolfo &7&l» &eTook %difference between now and {wolfo::loading}%."
	broadcast ""
	broadcast "&6&lWolfo &7&l» &7Loading main ..."
	set {wolfo::loading} to now

function wolfoAutoMsg():
	set {_list::*} to wolfoGetO("MESSAGE.AUTO")
	if {wolfo::game::automsg} is not set:
		set {wolfo::game::automsg} to true
		while {wolfo::game::automsg} is true:
			set {_random} to a random element out of {_list::*}
			if {_random} is not {_last}:
				set {_last} to {_random}
				broadcast join wolfoGet("PREFIX.GENERAL"), "&7" and {_random}
				wait 30 seconds

function wolfoHelp(msg: text, p: player):
	send join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.%{_msg}%_FIRST") to {_p}
	set {_%{_msg}%::*} to wolfoGetO("MESSAGE.%{_msg}%")
	loop {_%{_msg}%::*}:
		send colored loop-value to {_p}

function wolfoGetConfig(mode: integer) :: text:
	set {_p} to size of {wolfo::players::list::*}
	if {_mode} is 1:
		if {_p} is between 5 and 12:    # 5 à 12 donc |-3 +4
			return "&6Mini" # ou Restreinte
		if {_p} is between 13 and 17:    # 13 à 17 | -2 +2
			return "&eClassique"
		if {_p} is between 18 and 26:    # 18 à 26 | -4 +3
			return "&aMéga"
		else:
			return "&cJoueurs manquants"
	else if {_mode} is 2:
		if {_p} is between 5 and 12:    # 5 à 12 donc |-3 +4
			return "1"
		if {_p} is between 13 and 17:    # 13 à 17 | -2 +2
			return "2"
		if {_p} is between 18 and 26:    # 18 à 26 | -4 +3
			return "3"
		if {_p} is greater than or equal to 27:
			return "4"
		else:
			return "0"

function wolfoGetConfigRoles() :: objects:
	set {_p} to size of {wolfo::players::list::*}
	set {_config} to wolfoGetConfig(2) parsed as integer
	if {_config} is 0:
		return join wolfoGet("MESSAGE.NOTENOUGH1"), "&c%5 - {_p}%" and wolfoGet("MESSAGE.NOTENOUGH2")
		stop
	add "SEER", "DOCTOR" and "SHOOTER" to {_roles::*}    
	if {_config} is 1:
		{_p} is not 5
		add "CRAZY" to {_roles::*}
	if {_config} is 2 or 3:
		add "SEER_AURA", "CUPID", "WEREWOLF_ALPHA", "TOWNSFOLK_CURSED", "TOWNSFOLK_CURSED", "WITCH" and "HEADHUNTER" to {_roles::*}
	remove size of {_roles::*} from {_p}
	while {_p} is greater than 0:
		if mod({_p}, 2) is 0:
			add "WEREWOLF" to {_roles::*}
		else:
			add "TOWNSFOLK" to {_roles::*}
		remove 1 from {_p}
	return shuffled {_roles::*}

function wolfoGiveRoles():
	set {_input::*} to wolfoGetConfigRoles()
	if wolfoGetConfig(2) parsed as integer is 0 or 4:
		broadcast join wolfoGet("PREFIX.GENERAL") and {_input::*}
		stop
	wolfoRound(0)
	loop {wolfo::players::list::*}:
		set {_role} to wolfoGet("%{_input::%loop-index%}%.NAME")
		set {_desc} to wolfoGet("%{_input::%loop-index%}%.DESC")
		set {wolfo::players::role_text::%loop-value%} to {_role}
		set {wolfo::players::role_name::%loop-value%} to {_input::%loop-index%} 
		send title {_role} with subtitle "test" to loop-value for 2 seconds
		send join wolfoGet("PREFIX.GENERAL"), wolfoGet("MESSAGE.REVEAL") and {_role} to loop-value
		send {_desc} to loop-value
		add loop-value to {wolfo::players::role::%{_input::%loop-index%}%::*}
		wait 4 ticks
	wolfoRound(1)

function wolfoRound(type: integer):
	if {_type} is 0:
		set {wolfo::game::day} to 0
		set {wolfo::game::start} to true
		set {wolfo::game::status} to "&6Jour"
	if {_type} is 1:
		{wolfo::game::start} is true
		if {wolfo::game::status} is "&6Jour":
			send "&6&lWolfo &7&l» &fLa nuit tombe ..." to {wolfo::players::list::*}
			while "%time of ""world""%" isn't "0:00":
				add 50 ticks to time of "world"
				wait a tick
			strike lightning at {wolfo::game::center}
			set {wolfo::game::status} to "&7Nuit"
			wolfoManage(1)
		else:
			send "&6&lWolfo &7&l» &fLe jour se lève ..." to {wolfo::players::list::*}
			while "%time of ""world""%" isn't "12:00":
				add 50 ticks to time of "world"
				wait a tick
			set {wolfo::game::status} to "&6Jour"
			add 1 to {wolfo::game::day}
			wolfoManage(2)

function wolfoManage(i: number):
	{wolfo::game::start} is set
	if {_i} is 1:
		if {wolfo::vote::round} is not set:
			set {_config} to wolfoGetConfig(2) parsed as integer
			if {_config} is 1:
				set {wolfo::vote::round} to 1
			else:
				set {wolfo::vote::round} to 0
		else:
			if {wolfo::vote::round} is 1:
				set {_most::*} to wolfoMostVoted({wolfo::vote::list::*})
				broadcast "%{_most::1}% %{_most::2}%"
			clear {wolfo::vote::list::*}
			add 1 to {wolfo::vote::round}
		if {wolfo::vote::round} is 0:
			add "CUPID" to {_roles::*}
			send "&6&lWolfo &7&l» &f... et Cupidon va rendre deux joueurs amoureux." to {wolfo::players::list::*}
		else if {wolfo::vote::round} is 1:
			add "WEREWOLF" to {_roles::*}
			send "&6&lWolfo &7&l» &fLes Loup-Garous vont choisir leur victime ..." to {wolfo::players::list::*}
		else if {wolfo::vote::round} is 2:
			add "SEER" and "DOCTOR" to {_roles::*}
			send "&6&lWolfo &7&l» &fLa Voyante va découvrir le rôle d'un joueur ..." to {wolfo::players::list::*}
			if {_config} is 1:
				add "SEER_AURA" to {_roles::*}
				send "&6&lWolfo &7&l» &f... tandis que la Voyante Aura va découvrir l'aura d'un autre ..." to {wolfo::players::list::*}
			send "&6&lWolfo &7&l» &f... pendant que le Docteur va décider de protéger un joueur." to {wolfo::players::list::*}
		else if {wolfo::vote::round} is 3:
			if {_config} is 2 or 3:
				add "WITCH" to {_roles::*}
				send "&6&lWolfo &7&l» &fLa sorcière va décider de tuer un joueur ou sauver la victime choisie par les Loup-Garous ..." to {wolfo::players::list::*}
		else if {wolfo::vote::round} is 4:
			clear {wolfo::vote::round}
			wolfoRound(1)
			stop
		loop {_roles::*}:
			wolfoVote(loop-value)
			broadcast "&8[MANAGE VOTE]&8 ROUND:&7%{wolfo::vote::round}%&8   ROLE:&7%loop-value%"
	else if {_i} is 2:
		wolfoVote({wolfo::players::list::*})
		wolfoTime(30, {wolfo::players::list::*}, 3)
	else if {_i} is 3:
		wolfoRound(1)

function wolfoVote(roles: objects):
	loop {_roles::*}:
		wolfoVoteMenu({wolfo::players::role::%loop-value%::*})
		wolfoTime(30, {wolfo::players::role::%loop-value%::*}, 1)

function wolfoVoteMenu(p: objects):
	{wolfo::game::start} is set
	loop {_p::*}:
		unformat all gui slots of loop-value-1
		wolfoMenuDeco(loop-value-1, "&6A vous de voter..", 6)
		set {_loop} to 11
		loop {wolfo::players::list::*}:
			set {_player} to loop-value-2
			while {_loop} is 16, 17, 18, 26, 27 or 28:
				add 1 to {_loop}
			if {wolfo::vote::round} is 0:
				if {wolfo::vote::cupidon::*} contains {_player}:
					set {_heart} to "&c❤"
				else:
					set {_heart} to "&7❤"
				make a gui slot {_loop} of loop-value-1 with {_player}'s skull named "&6%{_player}% &f- %{_heart}%" to run:
					if size of {wolfo::vote::cupidon::*} is greater than or equal to 2:
						if {wolfo::vote::cupidon::*} contains {_player}:
							remove {_player} from {wolfo::vote::cupidon::*}
					else if {wolfo::vote::cupidon::*} do not contain {_player}:
						add {_player} to {wolfo::vote::cupidon::*}
						send "&6&lWolfo &7&l» &fSuper ! On espère que tu as fait le bon choix. Ton vote contre %{_player}% a été ajouté." to loop-value-1
			else if {wolfo::vote::round} is 1:
				if {wolfo::vote::list::%{_player}%::*} is not set:
					set {_material} to {_player}'s skull named "&6%{_player}% &f- &7Aucun vote" with lore "" and "&7Personne n'a voté."
				else:
					set {_material} to {_player}'s skull named "&6%{_player}% &f- &e&7%{wolfo::vote::list::%{_player}%}% votes" with lore "" and "&7Votants: %{wolfo::vote::list::%{_player}%::*}%"
				make a gui slot {_loop} of loop-value-1 with {_material} to run:
					if {wolfo::vote::success::%loop-value-1%} is set:
						if {wolfo::players::role::WEREWOLF_ALPHA::*} contains loop-value-1:
							remove 2 from {wolfo::vote::list::%{wolfo::vote::success::%loop-value-1%}%}
						else:
							remove 1 from {wolfo::vote::list::%{wolfo::vote::success::%loop-value-1%}%}
						remove loop-value-1 from {wolfo::vote::list::%{_player}%::*}
						clear {wolfo::vote::success::%loop-value-1%}
					set {wolfo::vote::success::%loop-value-1%} to {_player}
					if {wolfo::players::role::WEREWOLF_ALPHA::*} contains loop-value-1:
						add 2 to {wolfo::vote::list::%{_player}%}
					else:
						add 1 to {wolfo::vote::list::%{_player}%}
					add loop-value-1 to {wolfo::vote::list::%{_player}%::*}
					send "&6&lWolfo &7&l» &fSuper ! On espère que tu as fait le bon choix. Ton vote contre %{_player}% a été ajouté." to loop-value-1
					wolfoVoteMenu({_p::*})
				wolfoVoteMenu({_p::*})
			add 1 to {_loop}

function wolfoTime(t: integer, p: objects, mode: integer):
	if {wolfo::timer} is set:
		set {wolfo::timer} to {_t}
		stop
	if {_mode} is 0:
		set {_second} to wolfoGet("TIME.SECOND")
		set {_title} to wolfoGet("MESSAGE.TITLE")
		set {_starting} to wolfoGet("MESSAGE.STARTING")
		set {_start} to wolfoGet("MESSAGE.START")
	if {_mode} is 1:
		set {_second} to "seconde(s)"
		set {_title} to "test"
		set {_starting} to "dépéchez vous de voter, il vous reste "
		set {_start} to "vote terminé"
	set {_time} to {_t}
	set {wolfo::timer} to {_t}
	loop {_p::*}:
		loop ({wolfo::timer} - 5) times:
			send action bar join {_starting}, "&a%{wolfo::timer}% " and {_second} to loop-value-1
			set loop-value-1's level to {wolfo::timer}
			if mod({wolfo::timer}, 10) = 0: 
				send title {_title} with subtitle join {_starting}, "&a%{wolfo::timer}% " and {_second} to loop-value-1 for 2 seconds
			remove 1 from {wolfo::timer}
			wait a second
		while {wolfo::timer} >= 1:
			send title {_title} with subtitle join {_starting}, "&a%{wolfo::timer}% " and {_second} to loop-value-1 for 2 seconds
			send action bar join {_starting}, "&a%{wolfo::timer}% " and {_second} to loop-value-1
			set loop-value-1's level to {wolfo::timer}
			remove 1 from {wolfo::timer}
			wait 1 second
		send title {_title} with subtitle {_start} to loop-value-1 for a second
		send action bar {_start} to loop-value-1
		set loop-value-1's level to 0
	clear {wolfo::timer}
	if {_mode} is 0:
		wolfoStart()
	if {_mode} is 1 or 2:
		wolfoManage({_mode})

function wolfoDraw(type: text, p: text):
	if {_type} is "erase":
		stopEffect id "WW-%{_p}%"
	if {_type} is "img":
		set {_loc} to location at x-coordinate of {wolfo::loc::center}, y-coordinate of {wolfo::loc::center} + 10, z-coordinate of {wolfo::loc::center} in world "world"
		drawImage file "%{_p}%.png", center {_loc}, id "WW-game", randomRotation true, "y", pixelStepX 5, pixelStepY 5, scale 20, visibleRange 300, tps 1, second 3
	set {_p} to {_p} parsed as player
	if {_type} is "selected":
		stopEffect id "WW-%{_type}%"
		set {_loc} to location at x-coordinate of {_p}, y-coordinate of {_p} + 2, z-coordinate of {_p} in world "world"
		if {wolfo::players::spawn::%{_p}%} is 3 or 4 or 5 or 9 or 10 or 11 or 15 or 16 or 17 or 21 or 22 or 23:
			set {_angle} to 45
		if {wolfo::players::spawn::%{_p}%} is 6 or 7 or 8 or 18 or 19 or 20:
			set {_angle} to 90
		else:
			set {_angle} to 0
		set {_name} to wolfoGet("ANIMATION.SELECTION")
		drawImage file "%{_name}%.png", center {_loc}, id "WW-%{_type}%", pixelStepX 2, pixelStepY 2, scale 12, visibleRange 50, xR 0, yR {_angle}, zR 0, disX 0, disY 4, disZ 0, tps 0, second 2
	else if {_type} is "kill":
		set {_loc} to {wolfo::loc::center}
		add 3 to y-coordinate of {_loc}
		set {_pos} to location of {_p}
		add 1 to y-coordinate of {_pos}
		drawArc particle "flame", center location of {_pos}, target location of {_loc}, id "WW-rayon", rainbowMode false, density 50, height 0, pitchMultiplier 0, visibleRange 30
		set {_r} to 0
		loop 20 times:
			stopEffect id "WW-sphere"
			drawSphere style 1, particle "flame", center location of {_pos}, id "WW-sphere", rainbowMode false, radius {_r}, density 400, visibleRange 32, pulseDelay 1
			add 0.1 to {_r}
			wait a tick
		wait 8 ticks
		chance of 50%:
			play sound "entity.wither.death" with volume 10 and pitch 1 at {_p} for all players
		else:
			play sound "entity.wither.spawn" with volume 10 and pitch 1 at {_p} for all players
		strike lightning effect at location of {_p}
		wolfoKill({_p})
		wait 2 ticks
		stopEffect id "WW-rayon"
		stopEffect id "WW-sphere"
	else if {_type} is "spawn":
		hide {_p} to all players
		drawWarpRings style 2, particle "redstone", RGB 80, 255, 255, center location of {_p}, id "WW-%{_type}%", rainbowMode true, scan true, height 2, radius 1, ringCount 40, ringDensity 20, visibleRange 32, pulseDelay 1
		wait 2 second
		stopEffect id "WW-%{_type}%"
		reveal {_p} to all players
	else if {_type} is "center":
		drawAtom particle1 "redstone", particle2 "flame", center {wolfo::loc::center}, id "WW-%{_type}%", rainbowMode true, innerPCount 10, innerRadius .5, outerPCount 2, orbitCount 5, start 0, visibleRange 30, rotation 15

function wolfoKill(p: player):
	hide {_p} to all players
	set {wolfo::players::life::%{_p}%} to "&cMort"
	teleport {_p} to {wolfo::loc::deathSpawn}
	send title "&6&lWolfo &7&l»" with subtitle "&c Vous êtes mort !" to {_p} for 2 seconds

function wolfoMostVoted(c: objects) :: objects:
	set {_sorted::*} to sorted {_c::*}
	set {_top} to last element out of {_sorted::*}
	loop {_c::*}:
		loop-value is {_top}
		set {_p} to loop-index
	return {_p} and {_top}

function wolfoJoin(p: player):
	loop 200 times:
		send "" to {_p}
	set {_p}'s xp to 0
	teleport {_p} to {wolfo::loc::waitRoom}
	set {_p}'s gamemode to adventure
	clear {_p}'s inventory
	heal {_p}
	set {_p}'s walk speed to 0.2
	set current hotbar slot of {_p} to 4
	set slot 0 of {_p} to enchanted book named wolfoGet("ITEM.COSM")
	set slot 4 of {_p} to book named wolfoGet("ITEM.INFO")
	set slot 8 of {_p} to orange bed named wolfoGet("ITEM.EXIT")
	wolfoSbPlayer({_p}, 0)
	wolfoSetupPlayer({_p})
	wolfoCheckStart()

function wolfoLeave(p: player):
	wolfoSbPlayer({_p}, 1)
	remove {_p} from {wolfo::players::list::*}

function wolfoSetupPlayer(p: player):
	add {_p} to {wolfo::players::list::*}
	set {wolfo::players::role_text::%{_p}%} to "&7Aucun"
	set {wolfo::players::life::%{_p}%} to "&aEn vie"
	wait 1 second
	send join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.JOIN_INFO") to {_p}

function wolfoSetupGame(p: player):
	wolfoMenuSetup({_p})

command /wolfo [<text>] [<text>]:
	trigger:
		if arg 1 is "help":
			wolfoHelp("COMMANDS", player)
		else if arg 1 is "admin":
			wolfoSetupGame(player)
		else if arg 1 is "role":
			send "To Do"
		else:
			wolfoHelp("ADMIN", player)

function wolfoCheckWin():
	if size of {wolfo::players::list::*} = 0:
		set {_mode} to 1
	if size of {wolfo::players::list::*} = 1:
		set {_mode} to 2
	if size of {wolfo::players::role::WEREWOLF::*} = 0:
		set {_mode} to 3
	loop {wolfo::players::list::*}:
		if {wolfo::players::role_name::%loop-value%} is "TOWNSFOLK", "SEER_AURA", "CUPID", "TOWNSFOLK_CURSED", "WITCH", "DOCTOR" or "SHOOTER":
			add 1 to {_alive}
	if {_alive} isn't set:
		set {_mode} to 4
	if {_mode} is 1:
		wolfoEnd()
	if {_mode} is 2:
		loop {wolfo::players::list::*}:
			send title "&6&lWolfo &7&l»" with subtitle "&aVous avez gagné !" to loop-value for 2 seconds
			broadcast "&6&lWolfo &7&l» &a%loop-value% &fà win la game avec le rôle &b%{wolfo::players::role_name::%loop-value%}%"
		wait 5 seconds
		wolfoEnd()
	if {_mode} is 3:
		loop {wolfo::players::list::*}:
			if {wolfo::players::role_name::%loop-value%} is "WEREWOLF", "WEREWOLF_ALPHA", "CRAZY" or "HEADHUNTER":
				send title "&6&lWolfo &7&l»" with subtitle "&7Vous avez perdu !" to loop-value for 2 seconds
			else:
				send title "&6&lWolfo &7&l»" with subtitle "&aVous avez gagné !" to loop-value for 2 seconds
		broadcast "&6&lWolfo &7&l» &fLe &avillage &fà gagné la partie !"
		wait 5 seconds
		wolfoEnd()
	if {_mode} is 4:
		loop {wolfo::players::list::*}:
			if {wolfo::players::role_name::%loop-value%} is "TOWNSFOLK", "SEER_AURA", "CUPID", "TOWNSFOLK_CURSED", "WITCH", "DOCTOR", "SHOOTER", "CRAZY" or "HEADHUNTER":
				send title "&6&lWolfo &7&l»" with subtitle "&7Vous avez perdu !" to loop-value for 2 seconds
			else:
				send title "&6&lWolfo &7&l»" with subtitle "&aVous avez gagné !" to loop-value for 2 seconds
			broadcast "&6&lWolfo &7&l» &fLes &cLoup-garou &font gagné la partie !"
			wait 5 seconds
			wolfoEnd()

function wolfoCheckStart(force: boolean = false):
	if {_force} is false:
		if (size of {wolfo::players::list::*}) < 5:
			stop
	wolfoTime(30, {wolfo::players::list::*}, 0)
	send join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.START_PREPARE") to {wolfo::players::list::*}

function wolfoStart():
	loop {wolfo::players::list::*}:
		teleport loop-value to {wolfo::spawn::%loop-index%}
		set loop-value's walk speed to 0
	wolfoGiveRoles()
	set {wolfo::game::automsg} to false
	send join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.START_ROLES") to {wolfo::players::list::*}

function wolfoEnd():
	loop {wolfo::players::list::*}:
		kick loop-value due to join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.ENDGAME")
	clear {wolfo::players::*}
	clear {wolfo::game::*}
	clear {wolfo::timer}
	clear {wolfo::vote::*}

on chat:
	replace all "&" with "§" in message if player is op
	cancel event
	if {wolfo::game::start} is set:
		if {wolfo::players::life::%player%} is "&cMort":
			loop {wolfo::players::life::*}:
				if {wolfo::players::life::%loop-value%} is "&cMort":
					send "&8[&7Mort&8] &7%player% &8» &7%message%" to loop-value
					stop
		else:
			if {wolfo::game::status} is "&7Nuit":
				if {wolfo::players::role_name::%player%} is "WEREWOLF" or "WEREWOLF_ALPHA":
					loop {wolfo::players::role::WEREWOLF::*}:
						send "&8[&7Nuit&8] &8[&cLoup-garou&8] &7%player% &8» &7%message%" to loop-value
				else:
					send join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.MUTED")
			else:
				broadcast "&8[&fJour&8] &7%player% &8» &7%message%"
	else:
		broadcast "&7%player% &8» &7%message%"

on join:
	if {wolfo::game::start} is set:
		kick player due to join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.ALREADYSTART")
	else if size of {wolfo::players::list::*} is greater than or equal to 27:
		kick player due to join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.TOOMANY")
	else:
		set join message to "&a✔ %player% &7(%amount of all players% &8» %wolfoGetConfig(1)%&7)"
		wolfoJoin(player)

on quit:
	set quit message to "&c✘ %player% &7(%amount of all players - 1% &8» %wolfoGetConfig(1)%&7)"
	wolfoLeave(player)

on right click:
	if name of player's tool is wolfoGet("ITEM.COSM"):
		cancel event
		wolfoCosmetic(1, player)
	else if name of player's tool is wolfoGet("ITEM.COSM_OFF"):
		cancel event
		wolfoCosmetic(4, player)
	else if name of player's tool is wolfoGet("ITEM.INFO"):
		cancel event
		wolfoMenuRoles(player)
	else if name of player's tool is wolfoGet("ITEM.EXIT"):
		cancel event
		kick player due to join wolfoGet("PREFIX.GENERAL") and wolfoGet("MESSAGE.GOODLEFT")

on jump:
	if {wolfo::game::start} is set:
		cancel event

on drop:
	cancel event

on inventory click:
	if player isn't op:
		cancel event

on hunger meter change:
	cancel event

on weather change:
	cancel event

on damage of player:
	cancel event