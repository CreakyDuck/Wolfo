on script load:
	send join "&6&lWolfo &7&l» &8Took %difference between now and {wolfo::loading}%." to ops
	send "" to ops
	send "&6&lWolfo &7&l» &7Reloading game gestion ..." to ops
	set {wolfo::loading} to now
	wolfoDraw("center", "")

function wolfoGetConfig() :: integer:
	set {_p} to size of {wolfo::players::list::*}
	if {_p} is between 5 and 12:
		return 1
	else if {_p} is between 13 and 17:
		return 2
	else if {_p} is between 18 and 26:
		return 3
	else if {_p} is greater than or equal to 25:
		return 4
	else:
		return 1

function wolfoGetConfigRoles() :: objects:
	clear {wolfo::role::round::*}
	set {_p} to size of {wolfo::players::list::*}
	set {_config} to wolfoGetConfig()
	add "SEER", "DOCTOR" and "SHOOTER" to {_roles::*}
	if {_config} is 1:
		add "WEREWOLF", "SEER" and "DOCTOR" to {wolfo::role::round::*}
		{_p} is not 5
		add "CRAZY" to {_roles::*}
	if {_config} is 2 or 3:
		add "SEER_AURA", "CUPID", "WEREWOLF_ALPHA", "TOWNSFOLK_CURSED", "TOWNSFOLK_CURSED", "WITCH" and "HEADHUNTER" to {_roles::*}
		add "CUPID", "WEREWOLF", "SEER", "SEER_AURA", "DOCTOR" and "WITCH" to {wolfo::role::round::*}
	remove size of {_roles::*} from {_p}
	while {_p} is greater than 0:
		if mod({_p}, 2) is 0:
			add "WEREWOLF" to {_roles::*}
		else:
			add "TOWNSFOLK" to {_roles::*}
		remove 1 from {_p}
	return shuffled {_roles::*}

function wolfoGiveRoles():
	set {_input::*} to wolfoGetConfigRoles()
	send "&6&lWolfo &7&l» &cCette version de Wolfo est actuellement en Alpha. Nous sommes désolés si vous recontrez des bugs et n'hésitez pas à nous les rapporter afin de nous améliorer. Bon jeu !" to all players
	loop {wolfo::players::list::*}:
		{wolfo::players::role_name::%loop-value%} is not set
		set {wolfo::players::role::%loop-value%} to wolfoGet("ROLES.%{_input::%loop-index%}%.NAME")
		set {wolfo::players::role_name::%loop-value%} to {_input::%loop-index%}
		set {_desc::*} to wolfoGetO("ROLES.%{_input::%loop-index%}%.DESC")
		send title {_role} to loop-value for 2 seconds
		send join wolfoGet("PREFIX.GENERAL"), wolfoGet("MESSAGE.REVEAL") and wolfoGet("ROLES.%{_input::%loop-index%}%.NAME") to loop-value
		add loop-value to {wolfo::role::list::%{_input::%loop-index%}%::*}
		clear loop-value's inventory
		set slot 4 of loop-value to a book named wolfoGet("ITEM.VOTE")
		set {_item} to wolfoGet("ROLES.%{_input::%loop-index%}%.ITEM")
		set {_nbt} to wolfoGet("ROLES.%{_input::%loop-index%}%.NBT")
		set {_name} to wolfoGet("ROLES.%{_input::%loop-index%}%.NAME")
		set {_lore::*} to wolfoGetO("ROLES.%{_input::%loop-index%}%.DESC")
		# Cette syntaxe étant buggée, elle sera mise à jour dans une des prochaines versions.
		# set slot 8 of {_p} to {_item} parsed as material with nbt "%{_nbt}%" named colored "&7Votre rôle: %{_name}%" with lore colored {_lore::*} # C'est pas beau mais ça sera réglé prochainement.
		wait 4 ticks
	wolfoMain(0)

function wolfoVote(p: player):
	if {wolfo::vote::open} is true:
		wolfoMenuDeco({_p}, "", 6)
	else if {wolfo::vote::current} is {wolfo::players::role_name::%{_p}%}:
		wolfoMenuVote({wolfo::vote::current})
	else:
		send "&6&lWolfo &7&l» &fDésolé, ce n'est pas ton tour." to {_p}

function wolfoTime():
	if {wolfo::game::start} is true:
		if {wolfo::game::status} is "DAY":
			clear {wolfo::vote::*}
			send "&6&lWolfo &7&l» &fLa nuit tombe ..." to {wolfo::players::list::*}
			# On utilise un between pour être sûr que le while s'arrête correctement
			# quand l'heure ne tombe pas sur un nombre juste.
			while time of "world" isn't between 0:00 and 01:00:
				add 50 ticks to time of "world"
				wait a tick
			strike lightning at {wolfo::game::center}
			set {wolfo::game::status} to "NIGHT"
			wolfoMain(1)
		else:
			clear {wolfo::vote::*}
			send "&6&lWolfo &7&l» &fLe jour se lève ..." to {wolfo::players::list::*}	
			# On utilise un between pour être sûr que le while s'arrête correctement
			# quand l'heure ne tombe pas sur un nombre juste.
			while time of "world" isn't between 12:00 and 13:00:
				add 50 ticks to time of "world"	
				wait a tick	
			set {wolfo::game::status} to "DAY"	
			add 1 to {wolfo::game::day}
			wolfoMain(1)	
	wolfoSb({wolfo::players::list::*})

function wolfoResult() :: objects:
	set {_config} to wolfoGetConfig()
	set {_voted} to {wolfo::results::WEREWOLF}
	if {wolfo::results::DOCTOR} is {_voted}:
		clear {_voted}
	if {wolfo::results::WITCH} is true:
		clear {_voted}
	broadcast "&6&lWolfo &7&l» &f... la &aVoyante&f a aperçu un rôle %{wolfo::results::SEER}%&f..." if {wolfo::results::SEER} is set
	broadcast "&6&lWolfo &7&l» &f... la &2Voyante Aura&f a aperçu une aura %{wolfo::results::SEER_AURA}%&f." if {wolfo::results::SEER_AURA} is set
	if {_voted} is set:
		broadcast "&6&lWolfo &7&l» &f... et &e%{_voted}%&f est &cmort&f. Son rôle était %{wolfo::players::role::%{_voted}%}%&f."
		clear {wolfo::results::*}
		return {_voted}
	else:
		broadcast "&6&lWolfo &7&l» &f... et personne n'est mort !"
		clear {wolfo::results::*}

function wolfoMostVoted() :: objects:
	# On mélange préalablement la liste
	# pour être sûr du hazard. :)
	loop shuffled {wolfo::vote::list::*}:
		add 1 to {_vote::%loop-value%}
	set {_sorted::*} to sorted {_vote::*}
	set {_top} to last element out of {_sorted::*}
	if {_top} is not set:
		stop
	loop {_vote::*}:
		loop-value is {_top}
		set {_p} to loop-index
	# On retourne le joueur ainsi que son nombre de vote.
	return {_p} and {_top}

function wolfoMain(i: integer):
	if {_i} is 0:
		set {wolfo::game::day} to 0
		set {wolfo::game::status} to "DAY"
		set {wolfo::game::start} to true
		wolfoTime()
	if {_i} is 1:
		{wolfo::game::start} is true
		if {wolfo::game::status} is "NIGHT":
			set {wolfo::game::round} to true
			loop {wolfo::role::round::*}:
				clear {wolfo::vote::*}
				loop-value is "CUPID":
					{wolfo::game::day} is 0
				size of {wolfo::role::list::%loop-value%::*} is not 0
				set {wolfo::vote::current} to loop-value
				wolfoMenuVote(loop-value)
				set {wolfo::timer} to wolfoGet("TIME.VOTE")
				set {_name} to wolfoGet("ROLES.%loop-value%.NAME")
				while {wolfo::timer} is higher than 0:
					send action bar join "&8[&7%{wolfo::timer}%&8] &6Tour du rôle " and {_name} to all players
					remove 1 from {wolfo::timer}
					wait 1 second
				loop-value is "CUPID":
					size of {wolfo::results::%loop-value%::*} is 2
					set {wolfo::game::lovers::*} to {wolfo::results::%loop-value%::*}
					set {wolfo::results::CUPID} to true
				loop-value is "WEREWOLF":
					set {_result::*} to wolfoMostVoted()
					set {wolfo::results::WEREWOLF} to {_result::1}
				{wolfo::results::%loop-value%} is not set:
					broadcast join wolfoGet("PREFIX.GENERAL") and "&fLe rôle %{_name}%&f n'a pas joué ..."
				close {wolfo::role::list::%loop-value%::*}'s inventory
			wolfoTime()
		else if {wolfo::game::status} is "DAY":
			set {_result::*} to wolfoResult()
			if {_result::*} is set:
				loop {_result::*}:
					wolfoDraw("kill", "%loop-value%")
			wolfoCheckWin()
			{wolfo::game::start} is true
			set {wolfo::timer} to wolfoGet("TIME.DEBATE")
			while {wolfo::timer} is higher than 0:
				wait 1 second
				send action bar "&8[&7%{wolfo::timer}%&8] &6Discussion" to all players
				remove 1 from {wolfo::timer}
			clear {wolfo::vote::*}
			clear {wolfo::results::*}
			set {wolfo::vote::open} to true
			set {wolfo::timer} to wolfoGet("TIME.VOTE")
			while {wolfo::timer} is higher than 0:
				wait 1 second
				send action bar "&8[&7%{wolfo::timer}%&8] &6Vote des villageois" to all players
				remove 1 from {wolfo::timer}
			set {wolfo::vote::open} to false
			# Support des rôles personnalisés dans une mise à jour future.
			# Il sera possible d'ajouter ou de modifier les rôles, ce qui n'est pas encore possible ici.
			{wolfo::potions::2} is true:
				set {_target} to {wolfo::vote::voters::%{wolfo::role::list::WITCH::1}%}
				add {_target} and {_target} to {wolfo::vote::list::*}
			close inventory of all players
			clear {wolfo::role::list::TOWNSFOLK::*}
			broadcast "&6&lWolfo &7&l» &fLe village s'est décidé ..."
			set {_result::*} to wolfoMostVoted()
			# Dans tous les cas, si deux votes sont ex aequo, cette fonction
			# retournera toujours quelque chose, faisant appel à l'aléatoire !
			{_result::1} is not set:
				broadcast "&6&lWolfo &7&l» &f... mais en fait non."
			else:
				# On parse as offline player pour garder la casse des pseudos.
				broadcast "&6&lWolfo &7&l» &f... et élimine &e%{_result::1} parsed as offline player%&f avec &6%{_result::2}% voix&f. Son rôle était %{wolfo::players::role::%{_result::1}%}%&f."
				wolfoDraw("kill", "%{_result::1}%")
			wolfoCheckWin()
			{wolfo::game::start} is true
			wolfoTime()

function wolfoTimer(time: integer):
	set {wolfo::timer} to {_time}
	while {wolfo::timer} is not 0:
		send action bar "&8[&7%{wolfo::timer}%&8] &6Décompte avant début" to all players
		remove 1 from {wolfo::timer}
		wait 1 second
	wolfoGiveRoles()

function wolfoKill(p: player):	
	hide {_p} from all players	
	set {wolfo::players::life::%{_p}%} to "&cMort"	
	teleport {_p} to wolfoGetL("GAME.LOCATIONS.END")	
	send title "&6&lWolfo &7&l»" with subtitle "&cVous êtes mort !" to {_p} for 2 seconds
	set game mode of {_p} to spectator
	clear {_p}'s inventory
	remove {_p} from {wolfo::players::alive::*}
	remove {_p} from {wolfo::role::list::%{wolfo::players::role_name::%{_p}%}%::*}


# Cette partie est particulièrement sensible au niveau des bugs,
# si cette fonction ne fonctionne pas correctement, merci de nous
# signaler sur le forum ou sur Discord ! Merci !
function wolfoCheckWin():
	if size of {wolfo::players::alive::*} is 0:
		wolfoEnd()
	else if size of {wolfo::players::alive::*} is 1:
		add {wolfo::players::alive::*} to {_winners::*}
	else if size of {wolfo::role::list::WEREWOLF::*} is 0:
		add {wolfo::players::alive::*} to {_winners::*}
	{_winners::*} is set
	clear {wolfo::game::start}
	loop {_winners::*}:
		send title "&6&lWolfo &7&l»" with subtitle "&aVous avez gagné !" to loop-value for 2 seconds
		set {_role} to wolfoGet("ROLES.%{wolfo::players::role_name::%loop-value%}%.NAME")
		broadcast "&6&lWolfo &7&l» &a%loop-value% &fa gagné la partie avec le rôle %{_role}%&f !"
	set {_players::*} to {wolfo::players::list::*}
	remove {_winners::*} from {_players::*}
	loop {_players::*}:
		send title "&6&lWolfo &7&l»" with subtitle "&cVous avez perdu !" to loop-value for 2 seconds
	set {wolfo::timer} to 0
	wait 1 second
	set {wolfo::timer} to wolfoGet("TIME.END")
	while {wolfo::timer} is higher than 0:
		wait 1 second
		send action bar "&8[&7%{wolfo::timer}%&8] &6Fermeture de la partie" to all players
		remove 1 from {wolfo::timer}
	wolfoEnd()
