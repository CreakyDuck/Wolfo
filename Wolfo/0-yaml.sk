# Ce script contient toutes les informations nécessaires pour faire fonctionner les autres scripts.
# Merci de ne pas modifier son nom afin de garder une hiérachie et charger les autres scripts convenablement.

on script load:
	clear {wolfo::loading::error}
	send "&6&lWolfo &7&l» &7Loading config ..." to ops
	set {wolfo::loading} to now
	load yaml "plugins/Wolfo/config.yml" as "config"
	set {_languages::*} to yml list "LANGUAGES" from "config"
	if size of {_languages::*} is 0:
		add "fr_fr" to {_languages::*}
	loop {_languages::*}:
		load yaml "plugins/Wolfo/lang/%loop-value%.yml" as "lang_%loop-value%"
		yml "lang_%loop-value%" is empty
		send "&4Error! The file containing the language '%loop-value%' could not be found." to console
		send "&7Please download it at 'https://github.com/Romitou/Wolfo/releases' and add it to the Wolfo folder." to console
		add 1 to {wolfo::loading::error}
	yml "config" is empty
	send "&4Error! The file containing the config could not be found. " to console
	send "&7Please download it at 'https://github.com/Romitou/Wolfo/releases' and add it to the Wolfo folder." to console
	add 1 to {wolfo::loading::error}

Function wolfoGetText(request: text, lang: text) :: text:
	if yml "lang_%{_lang}%" is not loaded:
		broadcast "&8[&7DEBUG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7TEXT &7- &8REP:&cERR::FILE_NO_EXISTS" if {wolfo::debug::status} is true
		return "ERR::FILE_NO_EXISTS"
	if yml path {_request} from "lang_%{_lang}%" doesn't have value:
		broadcast "&8[&7DEBUG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7TEXT &7- &8REP:&cERR::INVALID_PATH" if {wolfo::debug::status} is true
		return "ERR::INVALID_PATH"
	broadcast "&8[&7DEBUG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7TEXT &7- &8REP:&aSUCCESSFULLY" if {wolfo::debug::status} is true
	return yml value {_request} from "lang_%{_lang}%"
function wolfoGet(request: text) :: text: # POUR LES TEXTES (plus utilisé)
	broadcast "&8[YAML &7CONFIG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7TEXT" if {wolfo::debug::status} is true
	return yaml value {_request} from "config"

function wolfoGetO(request: text) :: objects: # POUR LES OBJECTS
	broadcast "&8[YAML &7CONFIG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7OBJECTS" if {wolfo::debug::status} is true
	return yaml list {_request} from "config"

function wolfoGetL(request: text) :: location:
	broadcast "&8[YAML &7CONFIG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7LOCATION" if {wolfo::debug::status} is true
	return yaml value {_request} from "config"

function wolfoSet(request: text, value: text):
	broadcast "&8[YAML &7CONFIG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7TEXT" if {wolfo::debug::status} is true
	set yaml value {_request} from "config" to {_value}
	save yaml "config"

function wolfoSetL(request: text, value: location):
	broadcast "&8[YAML &7CONFIG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7LOCATION" if {wolfo::debug::status} is true
	set yaml value {_request} from "config" to {_value}
	save yaml "config"

function wolfoUpdateO(request: text, value: text, type: integer):
	broadcast "&8[YAML &7CONFIG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7OBJECTS" if {wolfo::debug::status} is true
	set {_list::*} to yaml list {_request} from "config"
	if {_type} is 0:
		if {_list::*} doesn't contain {_value}:
			add {_value} to {_list::*}
		else:
			remove {_value} from {_list::*}
		delete yaml list {_request} from "config" if {_list::*} is not set
	set yaml list {_request} from "config" to {_list::*}
	save yaml "config"