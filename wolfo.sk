import:
	java.util.ArrayList
	java.util.Collections
	java.util.Map$Entry
	ch.njol.skript.variables.Variables
	org.bukkit.entity.Player as Player

expression replace values %strings% with %strings% in %string%:
    get:
        set {_string} to expression-3
        loop expressions-1:
            add 1 to {_index}
            replace all "%loop-value%" with "%{_index}th element of expressions-2%" in {_string}
        return {_string}
 
plural expression [the] (1¦(highest|top)|2¦(lowest|last)) %integer% values of %objects% [formatted] as %string%:
    get:
        set {_list} to new ArrayList(Variables.getVariable(raw expressions-2.getName().toString(event), event and raw expressions-2.isLocal()).entrySet())
        {_list}.sort(Entry.comparingByValue())
        if parse mark = 1:
            Collections.reverse({_list})
        loop ...{_list}:
            "%loop-value.getValue()%" is not "0"
            add 1 to {_index}
            set {_sorted::%{_index}%} to replace values "@index" and "@value" with "%loop-value.getKey()%" and "%loop-value.getValue()%" in expression-3
            {_index} = expression-1
            stop loop
        return {_sorted::*}

on script load:
	lg_initialize()

function lg_initialize():
	add "messages" and "config" to {_loop::*}
	loop {_loop::*}:
		load yaml "plugins/Skript/scripts/Wolfo/%loop-value%.yml" as "%loop-value%"
		if yaml "%loop-value%" is empty:
			send "&4Oops! The file containing the %loop-value% could not be found." to console
			send "&7Please download it and add it to the Wolfo folder." to console
			add 1 to {_error}
	set {_actual} to text from "https://files.romitou.fr/wolfo"
	set {_current} to yaml value "VERSION" from "config"
	if {_actual} is not {_current}:
		send "&6Wow! It's been a while since you last updated Wolfo." to console
		send "&7Version &eV%{_actual}%&7 is already out, you are in &eV%{_current}%&7!" to console
		add 1 to {_error}
	if {_error} is set:
		broadcast "&6&lWolfo &7&l» &c%{_error}% errors were encountered while loading."
		broadcast "&7Please consult the console for more information."
		stop
	broadcast join msg("PREFIX.GENERAL") and "&aThe game has been loaded, have fun! &7(V%{_current}%)"
	lg_automsg()

function msg(request: text) :: text: # POUR LES TEXTES (plus utilisé)
	broadcast "&8[YAML &7MSG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7TEXT" if {wolfo::partie::debug::yml} is true
	return yaml value {_request} from "messages"

function msgB(request: text) :: boolean: # POUR LES BOOLEAN
	broadcast "&8[YAML &7MSG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7BOOLEAN" if {wolfo::partie::debug::yml} is true
	return yaml value {_request} from "messages"

function msgO(request: text) :: objects: # POUR LES OBJECTS
	broadcast "&8[YAML &7MSG&8]: &8REQ:&7%{_request}% &f- &8TYPE:&7OBJECTS" if {wolfo::partie::debug::yml} is true
	return yaml list {_request} from "messages"

# Symboles:  ➥ ➽ ⚠ ● »

function lg_automsg():
	set {_list::*} to msgO("MESSAGE.AUTO")
	if {wolfo::partie::automsg} is not set:
		set {wolfo::partie::automsg} to true
		while {wolfo::partie::automsg} is true:
			set {_random} to a random element out of {_list::*}
			if {_random} is not {_last}:
				set {_last} to {_random}
				broadcast join msg("PREFIX.GENERAL") and {_random}
				wait 10 seconds

function lg_help(msg: text, p: player):
	send join msg("PREFIX.GENERAL") and msg("MESSAGE.%{_msg}%_FIRST") to {_p}
	set {_%{_msg}%::*} to msgO("MESSAGE.%{_msg}%")
	loop {_%{_msg}%::*}:
		send colored loop-value to {_p}

function lg_scoreboard(p: player, t: text):
	if {_t} is "setup":
		create a new stylish scoreboard named "%{_p}%"	
		set title of stylish scoreboard "%{_p}%" to msg("PREFIX.TITLE")
		create a new id based score "%{_p}%11" with text "&1" slot 11 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%10" with text "&6&l» &f&lPartie:" slot 10 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%9" with text "&2" slot 9 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%8" with text " &6● &eStatus &f» &e%{wolfo::partie::status}%" slot 8 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%7" with text " &6● &eConnectés &f» &e%size of {wolfo::players::list::*}%" slot 7 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%6" with text " &6● &eConfigura&etion &f» &e%lg_get_configuration(1)%" slot 6 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%5" with text " &6● &eJour &f» &bn°%{wolfo::partie::day}%" slot 5 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%4" with text "&3" slot 4 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%3" with text "&6&l» &f&lJoueur:" slot 3 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%2" with text "&4" slot 2 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%1" with text " &6● &eVotre rôle &f» &e%{wolfo::players::role::%{_p}%}%" slot 1 for stylish scoreboard "%{_p}%"	
		create a new id based score "%{_p}%0" with text " &6● &eVotre équipe &f» &e%{wolfo::players::equipe::%{_p}%}%" slot 0 for stylish scoreboard "%{_p}%"	
		set stylish scoreboard of {_p} to "%{_p}%"
		while {_p} is online:
			set the text of id "%{_p}%8" to " &6● &eStatus &f» &e%{wolfo::partie::status}%"	
			set the text of id "%{_p}%7" to " &6● &eConnectés &f» &e%size of {wolfo::players::list::*}%"	
			set the text of id "%{_p}%6" to " &6● &eConfigura&etion &f» &e%lg_get_configuration(1)%"	
			set the text of id "%{_p}%5" to " &6● &eJour &f» &bn°%{wolfo::partie::day}%"	
			set the text of id "%{_p}%1" to " &6● &eVotre rôl&ee &f» &e%{wolfo::players::role_name::%{_p}%}%"	
			set the text of id "%{_p}%0" to " &6● &eVotre équ&eipe &f» &e%{wolfo::players::team::%{_p}%}%"	
			wait a second
	else:	
		reset stylish scoreboard of {_p}
		delete stylish scoreboard named "%{_p}%"

function lg_get_configuration(mode: integer) :: text:
	set {_p} to size of {wolfo::players::list::*}
	if {_mode} is 1:
		if {_p} is between 5 and 12:    # 5 à 12 donc |-3 +4
			return "&6Mini" # ou Restreinte
		if {_p} is between 13 and 17:    # 13 à 17 | -2 +2
			return "&eClassique"
		if {_p} is between 18 and 26:    # 18 à 26 | -4 +3
			return "&aMéga"
		else:
			return "&cJoueurs manquants"
	else if {_mode} is 2:
		if {_p} is between 5 and 12:    # 5 à 12 donc |-3 +4
			return "1"
		if {_p} is between 13 and 17:    # 13 à 17 | -2 +2
			return "2"
		if {_p} is between 18 and 26:    # 18 à 26 | -4 +3
			return "3"
		if {_p} is greater than or equal to 27:
			return "4"
		else:
			return "0"

function lg_get_roles_configuration() :: objects:
	set {_p} to size of {wolfo::players::list::*}
	set {_config} to lg_get_configuration(2) parsed as integer
	# - VERIFICATION
	if {_config} is 0:
		return join msg("MESSAGE.NOTENOUGH1"), "&c%5 - {_p}%" and msg("MESSAGE.NOTENOUGH2")
		stop
	# - REPARTITION ROLES DE BASE
	add "SEER", "DOCTOR" and "SHOOTER" to {_roles::*}    
	if {_config} is 1:
		{_p} is not 5 # Obligation pour avoir 1 LG / 1 VILLAGEOIS
		add "CRAZY" to {_roles::*}
	if {_config} is 2 or 3:
		add "SEER_AURA", "CUPID", "WEREWOLF_ALPHA", "TOWNSFOLK_DANM", "TOWNSFOLK_DANM", "WITCH" and "HEADHUNTER" to {_roles::*}
	# - ATTRIBUTION LG/VILLAGEOIS
	remove size of {_roles::*} from {_p}
	while {_p} is greater than 0:
		if mod({_p}, 2) is 0:
			add "WEREWOLF" to {_roles::*}
		else:
			add "TOWNSFOLK" to {_roles::*}
		remove 1 from {_p}
	return {_roles::*}

function lg_give_roles():
	set {_input::*} to lg_get_roles_configuration() 
	if lg_get_configuration(2) parsed as integer is 0 or 4:
		broadcast join msg("PREFIX.GENERAL") and {_input::*}
		stop
	lg_round(0)
	loop {wolfo::players::list::*}:
		set {_role} to msg("%{_input::%loop-index%}%.NAME")
		set {wolfo::players::role_name::%loop-value%} to {_role}
		send title msg("PREFIX.TITLE") with subtitle join msg("MESSAGE.REVEAL") and {_role} to loop-value for 2 seconds
		send join msg("PREFIX.GENERAL"), msg("MESSAGE.REVEAL") and {_role} to loop-value
		send msg("%{_input::%loop-index%}%.DESC") to loop-value
		if {_input::%loop-index%} contains "WEREWOLF" or "TOWNSFOLK":
			add loop-value to {wolfo::players::role::%{_input::%loop-index%}%::*}
		else:
			set {wolfo::players::role::%{_input::%loop-index%}%} to loop-value
		wait 3 seconds # 5 joueurs / seconde (si 4 ticks) --> maximum 5 secondes d'attente avec une partie complète
	lg_round(1)
	
function lg_round(type: integer):
	if {_type} is 0:
		set {wolfo::partie::day} to 0
		set {wolfo::partie::start} to true
		set {wolfo::partie::status} to "&6Jour"
	if {_type} is 1:
		{wolfo::partie::start} is true
		if {wolfo::partie::status} is "&6Jour":
			while "%time of ""world""%" isn't "0:00":
				add 50 ticks to time of "world"
				wait a tick
			strike lightning at {wolfo::partie::center}
			set {wolfo::partie::status} to "&7Nuit"
			lg_manage(0)
		else:
			while "%time of ""world""%" isn't "12:00":
				add 50 ticks to time of "world"
				wait a tick
			set {wolfo::partie::status} to "&6Jour"
			add 1 to {wolfo::partie::day}
			lg_manage(1)

function lg_manage(i: number):
	if {_i} is 0:
		if {wolfo::partie::day} is 0:
			lg_vote("CUPID")
			wait 1 second
		broadcast "&6[TEST]&f Vote des LG ..."
		wait 1 second
		broadcast "&6[TEST]&f Voyante, Voyante Aura, Docteur ..."
		wait 1 second
		broadcast "&6[TEST]&f Vote de la Sorcière ..."
		wait 1 second
		broadcast "&6[TEST]&f Fin des votes !"
		broadcast "&6[TEST]&f XXX a été tué !"
		wait 1 second
	else:
		broadcast "&6[TEST]&f Vote des joueurs ..."
		wait 5 seconds
	lg_round(1)

function lg_vote(type: text):
	# To Do

function lg_draw(p: player, type: text):
	if {_type} is "erase":
		stopEffect id "lg-center"
		stopEffect id "lg-selected"
		stopEffect id "lg-rayon"
		stopEffect id "lg-sphere"
		stopEffect id "lg-spawn"
	if {_type} is "selected":
		stopEffect id "lg-%{_type}%"
		set {_loc} to location at x-coordinate of {_p}, y-coordinate of {_p} + 2,  z-coordinate of {_p} in world "world"
		if {wolfo::players::spawn::%{_p}%} is 3 or 4 or 5 or 9 or 10 or 11 or 15 or 16 or 17 or 21 or 22 or 23:
			set {_angle} to 45
		if {wolfo::players::spawn::%{_p}%} is 6 or 7 or 8 or 18 or 19 or 20:
			set {_angle} to 90
		else:
			set {_angle} to 0
		if yaml value "ANIMATION.SELECTION" from "config" is "HAND":
			drawImage file "hand.png", center {_loc}, id "lg-%{_type}%", pixelStepX 2, pixelStepY 2, scale 8, visibleRange 50, xR 0, yR {_angle}, zR 0, disX 0, disY 4, disZ 0, tps 0, second 2
		else: # Pour quand même afficher une flèche si la config est erronée
			drawImage file "arrow.png", center {_loc}, id "lg-%{_type}%", pixelStepX 2, pixelStepY 2, scale 12, visibleRange 50, xR 0, yR {_angle}, zR 0, disX 0, disY 4, disZ 0, tps 0, second 2

		# AFFICHER UN HOLO AU DESSUS DE LA TETE DU JOUEUR AVEC SON NOMBRE DE VOTE -> {wolfo::players::vote::%{_p}%}
	if {_type} is "kill":
		set {_loc} to {wolfo::partie::center}
		add 3 to y-coordinate of {_loc}
		set {_pos} to location of {_p}
		add 1 to y-coordinate of {_pos}
		drawArc particle "flame", center location of {_pos}, target location of {_loc}, id "lg-rayon", rainbowMode false, density 50, height 0, pitchMultiplier 0, visibleRange 30
		set {_r} to 0
		loop 20 times:
			stopEffect id "lg-sphere"
			drawSphere style 1, particle "flame", center location of {_pos}, id "lg-sphere", rainbowMode false, radius {_r}, density 400, visibleRange 32, pulseDelay 1
			add 0.1 to {_r}
			wait a tick
		wait 8 ticks
		hide {_p} to all players
		strike lightning effect at location of {_p}
		wait 2 ticks
		stopEffect id "lg-rayon"
		stopEffect id "lg-sphere"
	if {_type} is "spawn":
		hide {_p} to all players
		drawWarpRings style 2, particle "redstone", RGB 80, 255, 255, center location of {_p}, id "lg-%{_type}%", rainbowMode true, scan true, height 2, radius 1, ringCount 40, ringDensity 20, visibleRange 32, pulseDelay 1
		wait 2 second
		stopEffect id "lg-%{_type}%"
		reveal {_p} to all players
	if {_type} is "center":
		drawAtom particle1 "redstone", particle2 "flame", center {wolfo::partie::center}, id "lg-%{_type}%", rainbowMode true, innerPCount 10, innerRadius .5, outerPCount 2, orbitCount 5, start 0, visibleRange 30, rotation 15

function lg_most_voted() :: objects:
	set {_playerVotes::*} to the highest (size of {wolfo::players::vote::*}) values of {wolfo::players::vote::*} as "@index;@value"
	loop {_playerVotes::*}:
		set {_s::*} to loop-value split at ";"
		add {_s::1} to {_players::*}
		add {_s::2} to {_votes::*}
	if {_votes::1} = {_votes::2}:
		chance of 50%:                                 # Si les deux premiers joueurs on le même nombre de vote,
			return {_players::1} and {_votes::1}       # 50/50 pour savoir qui va mourir.
		else:
			return {_players::2} and {_votes::2}
	return {_players::1} and {_votes::1}

function lg_join(p: player):
	loop 200 times:
		send "" to {_p}
	set {_p}'s xp to 0
	teleport {_p} to {wolfo::partie::waitRoom}
	set {_p}'s gamemode to adventure
	clear {_p}'s inventory
	heal {_p}
	set current hotbar slot of {_p} to 4
	set slot 4 of {_p} to book named msg("ITEM.INFO")
	set slot 8 of {_p} to orange bed named msg("ITEM.EXIT")
	lg_scoreboard({_p}, "setup")
	lg_setup()
	lg_setup_player({_p})
	lg_check_start()

function lg_quit(p: player):
	remove {_p} from {wolfo::players::list::*}
	lg_scoreboard({_p}, "remove")

function lg_setup_player(p: player):
	add {_p} to {wolfo::players::list::*}
	set {wolfo::players::role_name::%{_p}%} to "&7Aucune"
	set {wolfo::players::team::%{_p}%} to "&7Aucune"

function lg_setup():
	set {wolfo::partie::day} to 0
	set {wolfo::partie::status} to "&6Attente" #| "&6Attente" / "&aEn cours" / "&cArrêté"

function lg_time(t: integer, p: player, mode: text):
	
	# Mise en place des variables, afin de ne pas faire de requêtes au fichier YML toutes les secondes
	if {_mode} = "start":
		set {_second} to msg("TIME.SECOND")
		set {_title} to msg("MESSAGE.TITLE")
		set {_starting} to msg("MESSAGE.STARTING")
		set {_start} to msg("MESSAGE.START")
	set {_time} to {_t}
	loop ({_t} - 5) times:
		if {_mode} = "start":
			send action bar join {_starting}, "&a%{_t}% " and {_second} to {_p}
		set {_p}'s level to {_t}
		Player.setExp({_p} and {_t} / {_time})
		if mod({_t}, 10) = 0: 
			if {_mode} = "start":
				send title {_title} with subtitle join {_starting}, "&a%{_t}% " and {_second} to {_p} for 2 seconds
		remove 1 from {_t}
		wait a second
	loop 5 times:
		if {_mode} = "start":
			send title {_title} with subtitle join {_starting}, "&a%{_t}% " and {_second} to {_p} for 2 seconds
			send action bar join {_starting}, "&a%{_t}% " and {_second} to {_p}
		set {_p}'s level to {_t}
		Player.setExp({_p} and {_t} / {_time})
		remove 1 from {_t}
		wait a second
	if {_mode} = "start":
		send title {_title} with subtitle {_start} to {_p} for a second
		send action bar {_start} to {_p}
	set {_p}'s level to 0

	# Player.setExp(player, 0.1)
	# Utiliser ça pour mettre le level XP

function lg_check_win():
	if size of {wolfo::players::list::*} = 0:
		# reset de la partie
		lg_end()
	if size of {wolfo::players::list::*} = 1:
		# player a win
		lg_end()

function lg_check_start(force: boolean = false):
	if {_force} is false:
		if (size of {wolfo::players::list::*}) < 5:
			stop
	loop {wolfo::players::list::*}:
		lg_time(30, loop-value, "start")
	wait 30 seconds
	lg_start()

function lg_start():
	loop {wolfo::players::list::*}:
		teleport loop-value to {wolfo::spawn::%loop-index%}
	lg_give_roles()
	set {wolfo::partie::automsg} to false

function lg_end():
	loop {wolfo::players::list::*}:
		kick loop-value due to join msg("PREFIX.GENERAL") and msg("MESSAGE.ENDGAME")
	clear {wolfo::partie::start}
	clear {wolfo::players::*}
	clear {wolfo::partie::*}
	lg_setup()

function lg_settings(p: player):
	lg_menu_deco({_p}, "&6➽ &eParamètres du LG", 3)
	make a gui slot 11 of {_p} with painting named "&6» &eConfiguration de la partie" with lore "" and "&f➥ &d%lg_get_configuration(1)%" and "&7(Dépends du nombre de joueurs connectés sur le serveur)"

# {wolfo::partie::*} -> paramètre de la partie
# {wolfo::players::*} -> contient tous ce qui concerne les joueurs (rôles etc...)

command /middle:
	trigger:
		set {wolfo::partie::center} to location of player

# {wolfo::partie::status} -> "&6Attente" / "&eEn cours" / "&7Nuit" / "&fJour" / "&aTerminé"

command /lg [<text>] [<text>] [<text>]:
	permission: msg("PERMISSION.ADMIN")
	permission message: join msg("PREFIX.GENERAL") and msg("MESSAGE.PERMISSION")
	trigger:
		if arg 1 isn't set:
			lg_help("ADMIN", player)
		if arg 1 is "help":
			lg_help("ADMIN", player)
		if arg 1 is "setwait":
			if {wolfo::partie::start} is set:
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.ALREADYSTART")
			else:
				set {wolfo::partie::waitRoom} to location of player
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.SETWAITROOM")
		if arg 1 is "addSpawn":
			if {wolfo::partie::start} is set:
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.ALREADYSTART")
			else:
				set {_size} to (size of {wolfo::spawn::%{_size}%::*}) + 1
				set {wolfo::spawn::%{_size}%::*} to location of player
				send join msg("PREFIX.GENERAL"), msg("MESSAGE.ADDSPAWN") and "&7(%size of {wolfo::spawn::%{_size}%::*}%)"
		if arg 1 is "forcestart":
			if {wolfo::partie::start} is set:
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.ALREADYSTART")
			else:
				lg_check_start(true)
		if arg 1 is "forcestop":
			if {wolfo::partie::start} isn't set:
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.ALREADYSTOP")
			else:
				lg_end()
		if arg 1 is "settings":
			lg_settings(player)
		if arg 1 is "debug":
			if arg 2 is "yml":
				if {wolfo::partie::debug::yml} isn't set:
					set {wolfo::partie::debug::yml} to true
					send join msg("PREFIX.GENERAL") and msg("MESSAGE.YMLON")
				else:
					delete {wolfo::partie::debug::yml}
					send join msg("PREFIX.GENERAL") and msg("MESSAGE.YMLOFF")
			else if arg 2 is not set:
				if {wolfo::partie::debug} isn't set:
					set {wolfo::partie::debug} to true
					send join msg("PREFIX.GENERAL") and msg("MESSAGE.DEBUGON")
				else:
					delete {wolfo::partie::debug}
					send join msg("PREFIX.GENERAL") and msg("MESSAGE.DEBUGOFF")
		if arg 1 is "ymlreload": # ou autre x)
			if arg 2 is not "confirm":
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.YMLRELOAD")
			else:
				set yaml value "GENERATED" of "messages" to false
				save yaml "messages"
				lg_initialize()

command /addplayer:
	trigger:
		set {_p} to "Romitou" parsed as player
		add {_p} to {wolfo::players::list::*}

on chat:
	replace all "&" with "§" in message
	cancel event
	if {wolfo::partie::start} is set:
		if {wolfo::partie::status} is "&7Nuit":
			if {wolfo::players::role_name::%player%} is "WEREWOLF" or "WEREWOLF_ALPHA":
				loop {wolfo::players::equipe::lg::*}:
					send "&8[&7Nuit&8] &8[&cLoup-garou&8] &7%player% &8» &7%message%" to loop-value
			else:
				send join msg("PREFIX.GENERAL") and msg("MESSAGE.MUTED")
		else:
			broadcast "&8[&fJour&8] &7%player% &8» &7%message%"
	else:
		broadcast "&7%player% &8» &7%message%"

on join:
	#if {wolfo::partie::start} is not set:
	#	kick player due to join msg("PREFIX.GENERAL") and msg("MESSAGE.ALREADYSTART")
	#else if size of {wolfo::players::list::*} is greater than or equal to 27:
	#	kick player due to join msg("PREFIX.GENERAL") and msg("MESSAGE.TOOMANY")
	#else:
		set join message to "&a✔ %player% &7(%amount of all players% &8» %lg_get_configuration(1)%&7)"
		lg_join(player)

on quit:
	set quit message to "&c✘ %player% &7(%amount of all players - 1% &8» %lg_get_configuration(1)%&7)"
	lg_quit(player)


on right click:
	if player's tool is book enchanted:
		lg_cosmetic()
	if name of player's tool is msg("ITEM.INFO"):
		lg_menu_informations(player)
	else if name of player's tool is msg("ITEM.EXIT"):
		kick player due to join msg("PREFIX.GENERAL") and msg("MESSAGE.GOODLEFT")

on inventory click:
	if player isn't op:
		cancel event

on hunger meter change:
	cancel event

on weather change:
	cancel event

on damage of player:
	cancel event
